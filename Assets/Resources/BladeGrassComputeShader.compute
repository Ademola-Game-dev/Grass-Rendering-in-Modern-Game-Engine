// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> _Positions;

uint _Dimension;
float2 _PlacementOffset;

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Dimension || id.y >= _Dimension)
    {
        return;
    }
    
    uint pos = id.x + id.y * _Dimension;
    float randomOffset = Random(pos);
    float maxRandomX = _Dimension / _PlacementOffset.x;
    float maxRandomY = _Dimension / _PlacementOffset.y;
    
    float spawnX = (id.x / _PlacementOffset.x) + randomOffset;
    if (spawnX > maxRandomX)
        spawnX = maxRandomX;
    float spawnZ = (id.y / _PlacementOffset.y) + randomOffset;
    if (spawnZ > maxRandomY)
        spawnZ = maxRandomY;
 
    _Positions[pos] = float3(spawnX, 0.05f, spawnZ);
}
